# ----------------------------------------------------------------------------
# Prepare your app deployment tools and resources
# ----------------------------------------------------------------------------

# Docker Desktop
# https://docs.docker.com/desktop/install/windows-install/
docker version

# .NET SDK
dotnet --list-sdks
dotnet --version

# VS Code with extensions
# https://code.visualstudio.com/
code --install-extension ms-dotnettools.csdevkit
code --install-extension ms-azuretools.vscode-docker
code --install-extension ms-azuretools.vscode-azureappservice

# Azure CLI
az version
az upgrade 
az extension list --output table --query "[].{name:name, version:version, preview:preview, experimental:experimental}"
az extension add --name containerapp --upgrade

# PowerShell 7
$psversiontable


# --- Variables ---------------
$tenant       = '819ebf55-0973-4703-b006-581a48f25961'
$subscription = 'ece756e9-1860-4c65-a982-cfb8ac39e0d2'
$location     = 'westeurope'
$rg           = 'rg-az2003'
$vnet         = 'vnet-az2003'
$sb           = 'sb-az2003'
$acr          = 'acr2003'
$pe           = 'pe-acr-az2003'
# -----------------------------

# Azure login
az login --tenant $tenant
az account list --all --query "[].{name:name, state:state, isDefault:isDefault, subscriptionId:id, tenantId:tenantId}" --output table
az account set --subscription $subscription
az account show --query "{subscriptionName:name, subscriptionId:id, state:state, tenantId:tenantId, user:user.name}"


# Resource group
az group create --name $rg --location $location
az group list --query "sort_by([].{name:name, location:location}, &name)" --output table

# Virtual network
az network vnet create --name $vnet --resource-group $rg --location $location --address-prefixes '10.0.0.0/16' --subnet-name 'PESubnet' --subnet-prefix '10.0.0.0/24'
az network vnet subnet create --name 'ACASubnet' --vnet-name $vnet --resource-group $rg --address-prefix '10.0.4.0/23'
az network vnet subnet list --vnet-name $vnet --resource-group $rg --output table

# Service bus
az servicebus namespace create --name $sb --resource-group $rg --location $location --sku 'Basic'
az servicebus namespace show --name $sb --resource-group $rg --query "{name:name, location:location, sku:sku.name, status:status, serviceBusEndpoint:serviceBusEndpoint}" --output table

# Azure container registry
az acr create --name $acr --resource-group $rg --location $location --sku 'Premium' --admin-enabled true
az acr show --name $acr --resource-group $rg --query "{name:name, location:location, sku:sku.name, loginServer:loginServer, adminUserEnabled:adminUserEnabled}" --output table


# WebAPI app
$origdir = $pwd
mkdir ../az2003-webapi
cd ../az2003-webapi
dotnet new webapi --no-https
dotnet build
#     VS Code:   .NET: Generate Assets for Build and Debug
echo '[Bb]in/' > .gitignore
echo '[Oo]bj/' >> .gitignore
#     VS Code:   Publish to GitHub public repository
cd $origdir

# Docker image
#     VS Code:   az2003-webapi: Add Docker Files to Workspace
#                               .NET ASP.NET Core
#                               Linux
#                               Port: 5000
#                               Docker Compose: No
cd ../az2003-webapi
docker build --tag aspnetcorecontainer:latest .

$loginserver = az acr show --name $acr --resource-group $rg --query loginServer --output tsv
docker image tag aspnetcorecontainer "$loginserver/aspnetcorecontainer:v1"
docker image ls
az acr login --name $acr
docker push "$loginserver/aspnetcorecontainer:v1"

# Azure DevOps and starter pipeline --> Azure Portal

# Deploy a self-hosted Windows agent --> Azure DevOps Portal



# ------------------------------------------------------------------------------------------------
# Exercise - Configure Azure Container Registry for a secure connection with Azure Container Apps
# ------------------------------------------------------------------------------------------------

# Review
az resource list --resource-group $rg --query "sort_by([].{Type:type, name:name, location:location}, &Type)" --output table


# Configure a user-assigned managed identity
$mi = 'mi-az2003'
az identity create --name $mi --resource-group $rg --location $location
az identity show --name $mi --resource-group $rg --query "{name:name, location:location, principalId:principalId, clientId:clientId}" --output table
az identity list --query "[].{name:name, location:location, principalId:principalId, Type:type}" --output table
$miid = az identity show --name $mi --resource-group $rg --query principalId --output tsv
# not assigned to any resources yet


# Configure Container Registry with AcrPull permissions for the managed identity
az role definition list --query "[?roleName=='AcrPull'].{Name:roleName, Description:description, assignableScopes:assignableScopes[0]}" --output table
az acr show --name $acr --resource-group $rg --query "{name:name, Type:type}" --output table
$acrid = az acr show --name $acr --resource-group $rg --query "id" --output tsv
az role assignment create --role 'AcrPull' --assignee $miid --scope $acrid
az role assignment list --all --query "[?scope=='$acrid'].{roleName:roleDefinitionName, scope:scope}" --output table


# Configure Container Registry with a private endpoint connection

# Im Portal: Das Deployment erzeugt
#   - Microsoft.Network/privateEndpoints                                 mit NIC
#   - Microsoft.Network/privateEndpoints/privateDnsZoneGroups
#   - Microsoft.Network/privateDnsZones                                  mit zwei A records
#   - Microsoft.Network/privateDnsZones/virtualNetworkLinks              mit VNet ID
# Es sind dann 8 Ressourcen in der RG
az resource list --resource-group $rg --query "sort_by([].{Type:type, name:name, location:location}, &Type)" --output table

# Dasselbe mit CLI: TBD
# Hier schon mal der Anfang:
#      Tipp:  $pe ist oben definiert 
# az network private-endpoint create --name $pe `
#                                    --connection-name $pe `
#                                    --resource-group $rg `
#                                    --private-connection-resource-id $acrid --group-id 'registry' `
#                                    --vnet-name $vnet --subnet 'PESubnet' `
#                                    --nic-name "nic-$pe"

az network private-endpoint list --resource-group $rg --query "[].{Type:type, name:name, networkInterfaces:networkInterfaces[0].id, privateLinkServiceConnections:privateLinkServiceConnections[0].{name:name, groupIds:groupIds} }"
az network nic list --resource-group $rg --query "[].{name:name, location:location}" --output table
az network nic show --name "pe-acr-az2003-nic" --resource-group $rg --query "{name:name, Type:type, privateIPAddress:ipConfigurations[].privateIPAddress, privateEndpoint:privateEndpoint.id}" 